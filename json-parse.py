#!/usr/bin/env python3

import sys
import json
import os
import urllib.request
import elasticsearch
import elasticsearch.helpers
from elasticsearch import Elasticsearch

if 'ESURL' not in os.environ:
    es_url = "http://localhost:9200"
else:
    es_url = os.environ['ESURL']

if 'ESCERT' in os.environ:
    cert = os.environ['ESCERT']
else:
    cert = None

if cert:
    es = Elasticsearch([es_url], ca_certs=cert)
else:
    es = Elasticsearch([es_url])

class CVE:

    def __init__(self):
        self.ids = []
        self.current = -1
        self.rh_data = None

    def add(self, i):
        # some of these don't exist, just give up if it fails
        i['year'] = int(i['id'].split('-')[1])
        i['just_id'] = int(i['id'].split('-')[2])
        i['description_len'] = len(i["descriptions"][0]["value"])

        cve_bulk = {
                    "_op_type": "update",
                    "_index":   "cve-index",
                    "_id":      i["id"],
                    "doc_as_upsert": True,
                    "doc":  i
                   }

        self.ids.append(cve_bulk)
        self.__check_update()

    def __check_update(self, force = False):

        if force or len(self) > 1000:

            for ok, item in elasticsearch.helpers.streaming_bulk(es, self, max_retries=2):
                if not ok:
                    print("ERROR:")
                    print(item)

            self.ids = []
            self.current = -1

    def done(self):
        self.__check_update(True)

    def __next__(self):
        "Handle a call to next()"

        self.current = self.current + 1
        if self.current >= len(self.ids):
            raise StopIteration

        return self.ids[self.current]

    def __iter__(self):
        return self

    def __len__(self):
        return len(self.ids)

def main():

    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    else:
        print("Usage: %s <nvd-json-file>" % (sys.argv[0]))
        sys.exit(1)

    # First let's see if the index exists
    if es.indices.exists(index='cve-index') is False:
        # We have to create it and add a mapping
        # Mapping is busted
        #fh = open('cve-index-json-mapping.json')
        #mapping = json.load(fh)
        #es.indices.create(index='cve-index', mappings=mapping["mappings"], settings=mapping["settings"])
        es.indices.create(index='cve-index')

    fh = open(input_file)

    the_cves = CVE()
    while True:
        line = fh.readline()
        if not line: break

        json_data = json.loads(line)


        # ['CVE_Items'][0]['cve']['CVE_data_meta']['ID']
        the_cves.add(json_data)
        #es.update(id=cve_id, index="cve-index", body={'doc' : cve, 'doc_as_upsert': True})

    the_cves.done()

if __name__ == "__main__":
    main()

